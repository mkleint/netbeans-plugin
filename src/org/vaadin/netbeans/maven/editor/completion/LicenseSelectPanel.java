/*
 * Copyright 2000-2013 Vaadin Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.vaadin.netbeans.maven.editor.completion;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import java.util.Map.Entry;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

import org.openide.awt.HtmlBrowser;
import org.openide.util.NbBundle;

/**
 * @author denis
 */
class LicenseSelectPanel extends JPanel {

    private static final String TEXT_HTML = "text/html"; // NOI18N

    private static final String A_CLOSE = "</a>, "; // NOI18N

    private static final String A_HREF = "<a href='"; // NOI18N

    private static final String CLOSE_TAG = "'>"; // NOI18N

    private static final Object LICENSE_PROP = new Object();

    LicenseSelectPanel( Map<String, String> licenses, JButton button ) {
        initComponents();

        myButtonGroup = new ButtonGroup();

        initPanel(innerPanel, licenses, button);
    }

    String getSelectedLicense() {
        return mySelected;
    }

    @NbBundle.Messages({
            "severalLicensesInfo=<html>The add-on is available under several licenses.<br>Please choose one:</html>",
            "seeLicenses=<html>For more information about the license terms,<br>see the following links.</html>",
            "accessibleNameLicenseSelect=Several licenses notification",
            "accessibleDescrLicenseSelect=Notifies about alternative licenses available for an add-on",
            "accessibleNameLicensesList=List of available licenses",
            "accessibleDescrLicensesList=Shows available licenses with links to agreements" })
    private void initPanel( JPanel panel, Map<String, String> licenses,
            final JButton confirmButton )
    {
        Dimension gap = new Dimension(0, 10);
        BoxLayout layout = new BoxLayout(panel, BoxLayout.Y_AXIS);
        panel.setLayout(layout);

        JLabel label = new JLabel(Bundle.severalLicensesInfo());
        label.getAccessibleContext().setAccessibleDescription(
                Bundle.accessibleDescrLicenseSelect());
        label.getAccessibleContext().setAccessibleName(
                Bundle.accessibleNameLicenseSelect());

        panel.add(label);
        label.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(Box.createRigidArea(gap));

        ActionListener listener = new ActionListener() {

            @Override
            public void actionPerformed( ActionEvent e ) {
                if (e.getSource() instanceof JRadioButton) {
                    confirmButton.setEnabled(true);
                    JRadioButton button = (JRadioButton) e.getSource();
                    mySelected =
                            button.getClientProperty(LICENSE_PROP).toString();
                }
            }
        };
        for (Entry<String, String> entry : licenses.entrySet()) {
            JRadioButton button = new JRadioButton(entry.getKey());
            myButtonGroup.add(button);
            button.putClientProperty(LICENSE_PROP, entry.getKey());
            button.setAlignmentX(Component.LEFT_ALIGNMENT);
            button.addActionListener(listener);
            panel.add(button);
        }
        panel.add(Box.createRigidArea(gap));

        JLabel selectLabel = new JLabel(Bundle.seeLicenses());
        selectLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
        panel.add(selectLabel);
        selectLabel.getAccessibleContext().setAccessibleName(
                Bundle.accessibleNameLicensesList());
        selectLabel.getAccessibleContext().setAccessibleDescription(
                Bundle.accessibleDescrLicensesList());

        panel.add(Box.createRigidArea(new Dimension(0, 5)));

        JEditorPane pane = getLinksComponent(licenses, panel);
        panel.add(pane);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        innerPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout innerPanelLayout = new javax.swing.GroupLayout(innerPanel);
        innerPanel.setLayout(innerPanelLayout);
        innerPanelLayout.setHorizontalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 323, Short.MAX_VALUE)
        );
        innerPanelLayout.setVerticalGroup(
            innerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 216, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(innerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(innerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        innerPanel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LicenseSelectPanel.class, "ACSN_LicenseSelect")); // NOI18N
        innerPanel.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(LicenseSelectPanel.class, "ACSD_LicenseSelect")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel innerPanel;
    // End of variables declaration//GEN-END:variables

    static JEditorPane getLinksComponent( Map<String, String> licenses,
            JComponent parent )
    {
        JEditorPane pane = createLinksComponent(licenses, parent);
        pane.getAccessibleContext().setAccessibleName(
                Bundle.accessibleNameLicensesList());
        pane.getAccessibleContext().setAccessibleDescription(
                Bundle.accessibleDescrLicensesList());
        pane.setOpaque(false);
        pane.addHyperlinkListener(new HyperlinkListener() {

            @Override
            public void hyperlinkUpdate( HyperlinkEvent event ) {
                if (event.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
                {
                    HtmlBrowser.URLDisplayer.getDefault().showURL(
                            event.getURL());
                }
            }
        });
        return pane;
    }

    private static JEditorPane createLinksComponent(
            Map<String, String> licenses, JComponent parent )
    {
        JEditorPane pane = new JEditorPane();
        pane.setAlignmentX(Component.LEFT_ALIGNMENT);
        pane.setEditable(false);
        pane.setBackground(parent.getBackground());
        pane.setContentType(TEXT_HTML);
        pane.setBorder(null);

        StringBuilder builder = new StringBuilder();
        for (Entry<String, String> entry : licenses.entrySet()) {
            builder.append(A_HREF);
            builder.append(entry.getValue());
            builder.append(CLOSE_TAG);
            builder.append(entry.getKey());
            builder.append(A_CLOSE);
        }
        pane.setText(builder.substring(0, builder.length() - 2));
        return pane;
    }

    private ButtonGroup myButtonGroup;

    private String mySelected;
}
