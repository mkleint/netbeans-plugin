<#if package?? && package != "">
package ${package};
</#if>

import ${server_component_fqn};
<#if super_connector?? && super_connector != "">
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.Widget;
</#if> 
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.Window;
import com.vaadin.client.MouseEventDetailsBuilder;
import com.vaadin.client.communication.RpcProxy;
import com.vaadin.client.communication.StateChangeEvent;
<#if super_connector_fqn?? && super_connector_fqn != "">
import ${super_connector_fqn};
<#else>
import com.vaadin.client.ui.AbstractComponentConnector;
</#if>
import com.vaadin.shared.MouseEventDetails;
import com.vaadin.shared.ui.Connect;

@Connect(${server_component}.class)
public class ${name} extends <#if super_connector?? && super_connector != "">${super_connector}<#else>AbstractComponentConnector</#if> {

    private ${server_rpc} rpc = RpcProxy.create(${server_rpc}.class,this);

    public ${name}() {
            registerRpc(${client_rpc}.class, new ${client_rpc}() {
                public void alert(String message) {
                    // TODO: Do something useful
                    Window.alert(message);
                }
            });
            
            // TODO: ServerRpc usage example, do something useful instead
            getWidget().addClickHandler(new ClickHandler() {
            public void onClick(ClickEvent event) {
                final MouseEventDetails mouseDetails = MouseEventDetailsBuilder
                        .buildMouseEventDetails(event.getNativeEvent(),
                                getWidget().getElement());
                rpc.clicked(mouseDetails);
            }
        });
    }
    
   <#if super_connector?? && super_connector != "">
    @Override
    protected Widget createWidget() {
        return GWT.create(${widget}.class);
    }
    </#if>
    
    @Override
    public ${widget} getWidget() {
        return (${widget}) super.getWidget();
    }

    @Override
    public ${shared_state} getState() {
        return (${shared_state}) super.getState();
    }

    @Override
    public void onStateChanged(StateChangeEvent stateChangeEvent) {
        super.onStateChanged(stateChangeEvent);

        // TODO: do something useful
        final String text = getState().text;
        getWidget().setText(text);
    }
}
